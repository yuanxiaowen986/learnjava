ZipInputStream是一种FilterInputStream，它可以直接读取zip包的内容：

┌───────────────────┐
│    InputStream    │
└───────────────────┘
          ▲
          │
┌───────────────────┐
│ FilterInputStream │
└───────────────────┘
          ▲
          │
┌───────────────────┐
│InflaterInputStream│
└───────────────────┘
          ▲
          │
┌───────────────────┐
│  ZipInputStream   │
└───────────────────┘
          ▲
          │
┌───────────────────┐
│  JarInputStream   │
└───────────────────┘
另一个JarInputStream是从ZipInputStream派生，它增加的主要功能是直接读取jar文件里面的MANIFEST.MF文件。因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件。

读取zip包
我们来看看ZipInputStream的基本用法。

我们要创建一个ZipInputStream，通常是传入一个FileInputStream作为数据源，然后，循环调用getNextEntry()，直到返回null，表示zip流结束。

一个ZipEntry表示一个压缩文件或目录，如果是压缩文件，我们就用read()方法不断读取，直到返回-1：

try (ZipInputStream zip = new ZipInputStream(new FileInputStream(...))) {
    ZipEntry entry = null;
    while ((entry = zip.getNextEntry()) != null) {
        String name = entry.getName();
        if (!entry.isDirectory()) {
            int n;
            while ((n = zip.read()) != -1) {
                ...
            }
        }
    }
}

写入zip包
ZipOutputStream是一种FilterOutputStream，它可以直接写入内容到zip包。我们要先创建一个ZipOutputStream，通常是包装一个FileOutputStream，然后，每写入一个文件前，先调用putNextEntry()，然后用write()写入byte[]数据，写入完毕后调用closeEntry()结束这个文件的打包。

try (ZipOutputStream zip = new ZipOutputStream(new FileOutputStream(...))) {
    File[] files = ...
    for (File file : files) {
        zip.putNextEntry(new ZipEntry(file.getName()));
        zip.write(getFileDataAsBytes(file));
        zip.closeEntry();
    }
}
上面的代码没有考虑文件的目录结构。如果要实现目录层次结构，new ZipEntry(name)传入的name要用相对路径。


import java.io.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
/**
 * @authur    zhangqizky
 * @apiNote  操作zip:ZipInputStream和JarInputStream
 */

 public class MyZip
 {
     public static void main(String[]args)throws Exception
     {
         /**
          * @从zip文件中读取
          */
        try(ZipInputStream zip = new ZipInputStream(new FileInputStream("day02.zip")))
        {
            ZipEntry entry = null;
            while((entry = zip.getNextEntry()) != null)
            {
                String name = entry.getName();
                if(!entry.isDirectory())
                {
                    int n;
                    while((n=zip.read())!=-1)
                    {
                        System.out.println(n);
                    }
                }
            }

        }

        /**
         * @写入Zip文件
         */
        try(ZipOutputStream zip = new ZipOutputStream(new FileOutputStream("out.zip")))
        {
            File[]files = {new File("MyFile.java"),new File("MyFilter.java")};
            for (File f :files)
            {
                zip.putNextEntry(new ZipEntry(f.getName()));
                zip.write(getFileDataAsBytes(f));
                zip.closeEntry();
            }
        }
     }

     public static byte[] getFileDataAsBytes(File f)
     {
         byte[] data = new byte[(int)f.length()];
         try(InputStream is =new FileInputStream(f))
         {
             int n;
             while((n=is.read(data))!=-1)
             {
                 System.out.println("read"+n+"bytes");
             }

         }catch(IOException e)
         {
             e.printStackTrace();
         }
         return data;
     }
 }

廖雪峰：
准确地说：
byte[] data = new byte[(int)f.length()];
try(InputStream is =new FileInputStream(f))
你这两行代码之间，有可能文件会被其他程序修改，导致实际读取的字节与文件长度不一致
用ByteArrayOutputStream，那个就是用来在内存中开辟缓存的。

小结
ZipInputStream可以读取zip格式的流，ZipOutputStream可以把多份数据写入zip包；

配合FileInputStream和FileOutputStream就可以读写zip文件。



在Java中，字符和字符串是两个不同的类型。

字符类型
字符类型char是基本数据类型，它是character的缩写。一个char保存一个Unicode字符：

char c1 = 'A';
char c2 = '中';
因为Java在内存中总是使用Unicode表示字符，所以，一个英文字符和一个中文字符都用一个char类型表示，它们都占用两个字节。要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可：

int n1 = 'A'; // 字母“A”的Unicodde编码是65
int n2 = '中'; // 汉字“中”的Unicode编码是20013
还可以直接用转义字符\u+Unicode编码来表示一个字符：

// 注意是十六进制:
char c3 = '\u0041'; // 'A'，因为十六进制0041 = 十进制65
char c4 = '\u4e2d'; // '中'，因为十六进制4e2d = 十进制20013
字符串类型
和char类型不同，字符串类型String是引用类型，我们用双引号"..."表示字符串。一个字符串可以存储0个到任意个字符：

String s = ""; // 空字符串，包含0个字符
String s1 = "A"; // 包含一个字符
String s2 = "ABC"; // 包含3个字符
String s3 = "中文 ABC"; // 包含6个字符，其中有一个空格
因为字符串使用双引号"..."表示开始和结束，那如果字符串本身恰好包含一个"字符怎么表示？例如，"abc"xyz"，编译器就无法判断中间的引号究竟是字符串的一部分还是表示字符串结束。这个时候，我们需要借助转义字符\：

String s = "abc\"xyz"; // 包含7个字符: a, b, c, ", x, y, z
因为\是转义字符，所以，两个\\表示一个\字符：

String s = "abc\\xyz"; // 包含7个字符: a, b, c, \, x, y, z
常见的转义字符包括：

\" 表示字符"
\' 表示字符'
\\ 表示字符\
\n 表示换行符
\r 表示回车符
\t 表示Tab
\u#### 表示一个Unicode编码的字符
例如：

String s = "ABC\n\u4e2d\u6587"; // 包含6个字符: A, B, C, 换行符, 中, 文
字符串连接
Java的编译器对字符串做了特殊照顾，可以使用+连接任意字符串和其他数据类型，这样极大地方便了字符串的处理。例如：

// 字符串连接
public class Main {
    public static void main(String[] args) {
        String s1 = "Hello";
        String s2 = "world";
        String s = s1 + " " + s2 + "!";
        System.out.println(s);
    }
}

 Run
如果用+连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串，再连接：

// 字符串连接
public class Main {
    public static void main(String[] args) {
        int age = 25;
        String s = "age is " + age;
        System.out.println(s);
    }
}

 Run
Java的字符串除了是一个引用类型外，还有个重要特点，就是字符串不可变。考察以下代码：

// 字符串不可变
public class Main {
    public static void main(String[] args) {
        String s = "hello";
        System.out.println(s); // 显示 hello
        s = "world";
        System.out.println(s); // 显示 world
    }
}

 Run
观察执行结果，难道字符串s变了吗？其实变的不是字符串，而是变量s的“指向”。

执行String s = "hello";时，JVM虚拟机先创建字符串"hello"，然后，把字符串变量s指向它：

      s
      │
      ▼
┌───┬───────────┬───┐
│   │  "hello"  │   │
└───┴───────────┴───┘
紧接着，执行s = "world";时，JVM虚拟机先创建字符串"world"，然后，把字符串变量s指向它：

      s ──────────────┐
                      │
                      ▼
┌───┬───────────┬───┬───────────┬───┐
│   │  "hello"  │   │  "world"  │   │
└───┴───────────┴───┴───────────┴───┘
原来的字符串"hello"还在，只是我们无法通过变量s访问它而已。因此，字符串的不可变是指字符串内容不可变。

理解了引用类型的“指向”后，试解释下面的代码输出：

// 字符串不可变
public class Main {
    public static void main(String[] args) {
        String s = "hello";
        String t = s;
        s = "world";
        System.out.println(t); // t是"hello"还是"world"?
    }
}

 Run
空值null
引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象。例如：

String s1 = null; // s1是null
String s2; // 没有赋初值值，s2也是null
String s3 = s1; // s3也是null
String s4 = ""; // s4指向空字符串，不是null
注意要区分空值null和空字符串""，空字符串是一个有效的字符串对象，它不等于null。

练习
请将一组int值视为字符的Unicode编码，然后将它们拼成一个字符串：

public class Main {
    public static void main(String[] args) {
        // 请将下面一组int值视为字符的Unicode码，把它们拼成一个字符串：
        int a = 72;
        int b = 105;
        int c = 65281;
        // FIXME:
        String s = a + b + c;
        System.out.println(s);

    }
}
 Run
下载练习：Unicode值拼接字符串 （推荐使用IDE练习插件快速下载）


答案：
/**
 * 
 * char and String
 * 
 * @author yuanxiaowen
 */
public class JoinChar {
	public static void main(String[] args) {
		// 请将下面一组int值视为字符的Unicode码，把它们拼成一个字符串：
		int a = 72;
		int b = 105;
		int c = 65281;
		// FIXME:
		String s = "" + (char) a + (char) b + (char) c;
		System.out.println(s);

	}

}


小结
Java的字符类型char是基本类型，字符串类型String是引用类型；

基本类型的变量是“持有”某个数值，引用类型的变量是“指向”某个对象；

引用类型的变量可以是空值null；

要区分空值null和空字符串""。




—》Unicode兼容ASCII编码。
    补充一下：准确的说是UTF-8兼容ASCII

    UTF-8是一种针对Unicode的变长字符编码，可表示Unicode标准中的任何字符，并且与ASCII兼容，使得原来针对ASCII的程序或者软件不做或者只做少量的改变即可继续使用。
    具体来说，UTF-8针对8bit为单位的UCS进行转换，选择边长字节进行存储，其最大长度甚至可以达到六个字节。这样做的最大的好处就是对ASCII的兼容，因为所有ASCII的字
    符都可以保持原有的字符编码不变。

    java源文件(.java)和编译后的.class文件，源文件可以采用多种编码格式如utf-8(unix/linux默认) 或者gbk(windows默认)，当将源码用javac编译的时候，默认是javac按照
    系统默认的编码格式读取java源文件， 然后以utf-8的格式输出到.class文件中，换句话说，在默认情况下unix平台，javac用utf-8格式读取java源文件 然后以utf-8格式写.class；
    在默认情况下,windows平台javac用gbk格式读取java源文件然后以utf-8格式写.class。


—》 "" 这个为什么要加在(char)a前面，是什么原理啊，没看懂。
—》加个 “” 就类似于你定义一个空的字符串在前面:
    String str = "";
    String s = str + (char)a + (char)b + (char)c;
    有了第一个string，后面的 + 就是字符串的连接了操作符了，而不再是 char/int 的数值相加了。
